name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      release_type: ${{ steps.meta.outputs.release_type }}
      commit_short: ${{ steps.meta.outputs.commit_short }}
      tag_name: ${{ steps.meta.outputs.tag_name }}
      release_name: ${{ steps.meta.outputs.release_name }}
      prerelease: ${{ steps.meta.outputs.prerelease }}
      build_time: ${{ steps.meta.outputs.build_time }}
    steps:
      - name: Prepare metadata
        id: meta
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          commit_short=$(echo "$GITHUB_SHA" | cut -c1-7)
          build_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            version="$commit_short"
            release_type="manual"
            tag_name="test-${commit_short}"
            release_name="TatuScan test ${commit_short}"
            prerelease="true"
          else
            version="$REF_NAME"
            tag_name="$version"
            release_name="TatuScan ${version}"
            prerelease="false"
            release_type="tag"
          fi

          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "release_type=$release_type" >> "$GITHUB_OUTPUT"
          echo "commit_short=$commit_short" >> "$GITHUB_OUTPUT"
          echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          echo "release_name=$release_name" >> "$GITHUB_OUTPUT"
          echo "prerelease=$prerelease" >> "$GITHUB_OUTPUT"
          echo "build_time=$build_time" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            archive: tar.gz
            ext: ""
          - goos: linux
            goarch: arm64
            archive: tar.gz
            ext: ""
          - goos: darwin
            goarch: amd64
            archive: tar.gz
            ext: ""
          - goos: darwin
            goarch: arm64
            archive: tar.gz
            ext: ""
          - goos: windows
            goarch: amd64
            archive: zip
            ext: .exe
          - goos: windows
            goarch: arm64
            archive: zip
            ext: .exe
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      BUILD_TIME: ${{ needs.prepare.outputs.build_time }}
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: client/go.mod

      - name: Build binary
        run: |
          mkdir -p bin
          output="tatuscan-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -trimpath -tags netgo \
            -ldflags "-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}" \
            -o "bin/${output}" ./cmd/tatuscan

      - name: Package artifact
        id: package
        run: |
          mkdir -p dist
          output="tatuscan-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          archive="tatuscan-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cp "bin/${output}" "dist/${output}"
          if [ "${{ matrix.archive }}" = "zip" ]; then
            (cd dist && zip "${archive}.zip" "${output}")
            asset="dist/${archive}.zip"
          else
            (cd dist && tar -czf "${archive}.tar.gz" "${output}")
            asset="dist/${archive}.tar.gz"
          fi
          echo "asset=${asset}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tatuscan-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ steps.package.outputs.asset }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Show assets
        run: ls -R release-assets

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          name: ${{ needs.prepare.outputs.release_name }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          draft: false
          files: release-assets/**
          body: |
            ## Release Summary

            - Version: `${{ needs.prepare.outputs.version }}`
            - Release type: `${{ needs.prepare.outputs.release_type }}`
            - Commit: `${{ github.sha }}`
            - Short hash: `${{ needs.prepare.outputs.commit_short }}`

            Generated via GitHub Actions with multi-platform artifacts.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}